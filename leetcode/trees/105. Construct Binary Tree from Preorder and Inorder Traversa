/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int>m;
    TreeNode* solve(vector<int>& preorder, vector<int>& inorder,int ps,int pe,int is,int ie)
    {
        if(ps>pe)
        {
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[ps]);
        int pos=m[root->val];
        root->left=solve(preorder,inorder,ps+1,ps+pos-is,is,pos-1);
        root->right=solve(preorder,inorder,pe - ie + pos + 1, pe, pos + 1, ie);
        return root;


    } 
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=inorder.size();
        for(int i=0;i<n;i++)
        {
            m[inorder[i]]=i;
        }
        return solve(preorder,inorder,0,n-1,0,n-1);

        
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 // with use of morris traversal:
class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode* cur=root;
        while(cur!=NULL)
        {
            if(cur->left==NULL)
            {
                cur=cur->right;
            }
            else
            {
                TreeNode* prev=cur->left;
                while(prev->right!=NULL)
                {
                    prev=prev->right;
                }
                prev->right=cur->right;
                cur->right=cur->left;

                cur->left=NULL;
                cur=cur->right;

            }
        }
        
    }
};


//using recursion:

void flatten(TreeNode* root) {
        if(root==NULL)
        {
            return;
        }
        flatten(root->left);
        flatten(root->right);
        
        TreeNode* temp;
        if(root!=NULL && root->left!=NULL)
        {
            temp=root->left;
        while(temp!=NULL && temp->right!=NULL)
        {
            temp=temp->right;
        }
        temp->right=root->right;
        root->right=root->left;
        root->left=NULL;
        
        }

    }
};

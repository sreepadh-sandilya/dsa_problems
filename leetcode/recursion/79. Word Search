class Solution {
public:
    bool dfs(int i,int j,vector<vector<char>>& board,string word,string &s,int m,int n,vector<vector<bool>>&vis)
    {
        
       if(i==m || i==-1 || j==n || j==-1 || vis[i][j] || s!=word.substr(0,s.size()))
       {
           return false;
       }
       vis[i][j]=true;
       s+=board[i][j];
       if(s==word)
       {
           return true;
       }
       
       else if(s.size()<word.size())
       {

           if(dfs(i+1,j,board,word,s,m,n,vis) || dfs(i-1,j,board,word,s,m,n,vis) || dfs(i,j+1,board,word,s,m,n,vis) || dfs(i,j-1,board,word,s,m,n,vis) )
           {
               return true;
           }
       }
        //    else
        //    {
        //        return false;
        //    }

       
       vis[i][j]=false;
       s.pop_back();
       return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int m=board.size(),n=board[0].size();
        int sum=0;
        int i=0,j=0;
        int k=word.length();
        string s="";
        vector<vector<bool>>vis(m,vector<bool>(n,false));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==word[0])
                {
                    if(dfs(i,j,board,word,s,m,n,vis)==true){
                        return true;
                    }
                }
            }
        }
        return false;

        
    }
};

class Solution{
public:
    int kthLargest(vector<int> &arr,int n,int k){
        vector<int>v;
        int count=0;
        priority_queue<int,vector<int>,greater<int>>pq;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                count++;
                sum+=arr[j];
                if(count<=k)
                {
                    pq.push(sum);
                }
                else
                {
                    if(pq.top()<sum)
                    {
                        pq.pop();
                        pq.push(sum);
                    }
                }
            }
        }
        
        return pq.top();
        
        
        
    }
};

// time complexity  is o(n^2 * log(n))  ... and space complexity is O(k)

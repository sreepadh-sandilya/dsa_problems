
class node{
    public:
    int sum,index;
    node(int a,int b)
    {
        sum=a;
        index=b;
    }

};

class compare{
    public:
    bool operator()(node* a,node*b)
    {
        if(a->sum==b->sum)
        {
            return a->index<b->index;
        }
        return a->sum<b->sum;
    }
};

class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int m=mat.size();
        int n=mat[0].size();
        int sum=0;
        priority_queue<node*,vector<node*>,compare>pq;
        for(int i=0;i<k;i++)
        {
            sum=0;
            for(int j=0;j<n;j++)
            {
                sum+=mat[i][j];

            }
            pq.push(new node(sum,i));
        }
        

        for(int i=k;i<m;i++)
        {
            sum=0;
            for(int j=0;j<n;j++)
            {
                sum+=mat[i][j];

            }
            node* temp=pq.top();
            if(temp->sum==sum)
            {
                if(temp->index>i)
                {
                    pq.pop();
                    pq.push(new node(sum,i));

                }
            }
            else if(temp->sum>sum)
            {
                pq.pop();
                pq.push(new node(sum,i));
            }
        }

        vector<int>v;
        while(!pq.empty())
        {
            node* temp=pq.top();
            pq.pop();
            v.push_back(temp->index);
        }
        reverse(v.begin(),v.end());

        return v;

        
        
    }
};

class Solution
{
    public:
    //Function to insert heap
    priority_queue<int>maxheap;
    priority_queue<int,vector<int>,greater<int>>minheap;
    double median=0;
    vector<int>v;
    void insertHeap(int &x)
    {
        int p=balanceHeaps();
        switch(p){
            case 0: if(x>median){
                minheap.push(x);
                median=minheap.top();
            }
                    else{
                        maxheap.push(x);
                        median=maxheap.top();
                    }
                    
                break;        
            case 1:if(x>median){
                minheap.push(x);
                median=(maxheap.top()+minheap.top())/2;
            }
                 else{
                minheap.push(maxheap.top());
                maxheap.pop();
                maxheap.push(x);
                median=(maxheap.top()+minheap.top())/2;
            }
                
                break;
            case -1:if(x>median){
                maxheap.push(minheap.top());
                minheap.pop();
                minheap.push(x);
                median=(maxheap.top()+minheap.top())/2;
            }
                    else{
                        maxheap.push(x);
                        median=(maxheap.top()+minheap.top())/2;
                        
                        
                    }
                break;
            
                   
        }
        
    }
    
    //Function to balance heaps.
    int balanceHeaps()
    {
        
        if(maxheap.size()==minheap.size())
        {
            return 0;
        }
        else if(maxheap.size()>minheap.size())
        {
            return 1;
        }
        else
        {
            return -1;
        }
    }
    
    //Function to return Median.
    double getMedian()
    {
        
        return median;
    }
};



// same method with simpler steps:

class MedianFinder {
public:
    priority_queue<double> max_pq;
    priority_queue<double, vector<double>, greater<double> > min_pq;      
    MedianFinder() {
        
    }
    
    void addNum(int num) {
            if(min_pq.empty() && max_pq.empty()){
                max_pq.push(num);
            } 
            else if(!max_pq.empty() && num <= max_pq.top()){
                max_pq.push(num);
            } 
            else{
                min_pq.push(num);
            }
        
        
        if(abs(max_pq.size() - min_pq.size() > 1)){ 
                if(max_pq.size() > min_pq.size()){
                    min_pq.push(max_pq.top());
                    max_pq.pop();
                } else {
                    max_pq.push(min_pq.top());
                    min_pq.pop();
                }
        }
    }
    
    double findMedian() {
        
        double median;
            

            if(max_pq.size() > min_pq.size()){ 
                median= max_pq.top();
            } else if(max_pq.size() < min_pq.size()){
                median= min_pq.top();
            } else {
                
                if(max_pq.empty()){
                    median=0;
                } else{
                    median = (max_pq.top() + min_pq.top())/2.0;
                }
                
            }
        
         return median;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */


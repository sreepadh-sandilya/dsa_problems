class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {

        sort(intervals.begin(),intervals.end());
        vector<vector<int>>ans;
        int n=intervals.size();
        if(n==0)
        {
            ans.push_back(newInterval);
            return ans;
        }
        if(newInterval.size()==0)
        {
            return intervals;
        }
        ans.push_back(intervals[0]);
        for(int i=1;i<n;i++)
        {
            if(ans.back()[1]>=newInterval[0] && ans.back()[0]<=newInterval[0] )
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);
                newInterval.clear();
                newInterval.push_back(intervals[i][0]);
                newInterval.push_back(intervals[i][1]);
            }
            else if(ans.back()[1]>=newInterval[1] && ans.back()[0]<=newInterval[1])
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);
                newInterval.clear();
                newInterval.push_back(intervals[i][0]);
                newInterval.push_back(intervals[i][1]);
            }
            else if(ans.back()[0]>=newInterval[0] && ans.back()[1]<=newInterval[1])
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);
                newInterval.clear();
                newInterval.push_back(intervals[i][0]);
                newInterval.push_back(intervals[i][1]);
            }
            else if(newInterval[0]>=intervals[i][0])
            {
                ans.push_back(intervals[i]);

            }
            else
            {
                
               ans.push_back(newInterval);
                newInterval.clear();
                newInterval.push_back(intervals[i][0]);
                newInterval.push_back(intervals[i][1]);
            }

        }

        if(newInterval.size())
        {
            cout<<newInterval[0]<<" "<<newInterval[1]<<endl;
            if(ans.back()[1]>=newInterval[0] && ans.back()[0]<=newInterval[0] )
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);

            }
            else if(ans.back()[1]>=newInterval[1] && ans.back()[0]<=newInterval[1])
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);

            }
            else if(ans.back()[0]>=newInterval[0] && ans.back()[1]<=newInterval[1])
            {
                ans.back()[1]=max(ans.back()[1],newInterval[1]);
                ans.back()[0]=min(ans.back()[0],newInterval[0]);

            }
            else
            {
                ans.push_back(newInterval);
            }
            
        }
        sort(ans.begin(),ans.end());
        return ans;

    }
};

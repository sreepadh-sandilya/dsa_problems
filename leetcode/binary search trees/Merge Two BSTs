#include <bits/stdc++.h> 
/*************************************************************
    
    Following is the Binary Tree node structure:

    class TreeNode{

        public :
            int data;
            TreeNode *left;
            TreeNode *right;

            TreeNode(int data) {
                this -> data = data;
                left = NULL;
                right = NULL;
            }

            ~TreeNode() {
            if (left){
            delete left;
            }

            if (right){
            delete right;
            }
        }   
    };

*************************************************************/
void merge(vector<int>&v1,vector<int>&v2,vector<int>&p)
{
    int m=v1.size();
    int n=v2.size();
    int i=0,j=0;
    while(i<m && j<n)
    {
        if(v1[i]>v2[j])
        {
            p.push_back(v2[j]);
            j++;
        }
        else
        {
            p.push_back(v1[i]);
            i++;
        }

    }

    while(i<m)
    {
        p.push_back(v1[i]);
        i++;
    }

    while(j<n)
    {
        p.push_back(v2[j]);
        j++;
    }
}

void inorder(vector<int>&v1,TreeNode<int> *root1)
{
    if(root1==NULL)
    {
        return;
    }
    inorder(v1,root1->left);
    v1.push_back(root1->data);
    inorder(v1,root1->right);
}

TreeNode<int>* solve(int s,int e,vector<int>p)
{
    if(s>e)
    {
        return NULL;
    }
    int m=(s+e)/2;
    TreeNode<int>* n=new TreeNode<int>(p[m]);
    n->left=solve(s,m-1,p);
    n->right=solve(m+1,e,p);
    return n;
}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    // Write your code here.
    vector<int>v1,v2,p;
    inorder(v1,root1);
    inorder(v2,root2);
    merge(v1,v2,p);
    int s=0,e=p.size()-1;
    return solve(s,e,p);
}

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include <queue>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;
    node(int d)
    {
        data=d;
        left=NULL;
        right=NULL;
    }
};

node* insertintoBST(node* &root,int d){
    if(root==NULL){
        root=new node(d);
        return root;
    }
    
    if(d>root->data)
    {
        root->right=insertintoBST(root->right,d);
    }
    if(d<root->data){
        root->left=insertintoBST(root->left,d);
    }
    
    return root;
}

void takeinput(node* &root){
    int data;
    cin>>data;
    while(data!=-1){
        insertintoBST(root,data);
        cin>>data;
    }
}

void printlevelorder(node* root)
{
    if(root==NULL)
    {
        return;
    }
    std::queue<node*>q ;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty())
    {
        node* n=q.front();
        q.pop();
        if(n!=NULL)
        {
            cout<<n->data<<" ";
            if(n->left)
            {
                q.push(n->left);
            }
            if(n->right)
            {
                q.push(n->right);
            }
        }
        
        else if(!q.empty())
        {
            q.push(NULL);
        }
    }
    
    
}

node* minvalue(node* root)
{
    node* temp=root;
    while(temp->left!=NULL)
    {
        temp=temp->left;
    }
    return temp;
}

node* maxvalue(node* root)
{
    node* temp=root;
    while(temp->right!=NULL)
    {
        temp=temp->right;
    }
    return temp;
}

node* deletefromBST(node* root,int val)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data==val)
    {
        // 0 child
        if(root->left==NULL && root->right==NULL)
        {
            delete root;
            return NULL;
        }
        // 1 child:
        //left child
        if(root->left!=NULL && root->right==NULL)
        {
            node* temp=root->left;
            delete root;
            return temp;
        }
        //right child:
        if(root->left==NULL && root->right!=NULL)
        {
            node* temp=root->right;
            delete root;
            return temp;
        }
        
        //2child:
        if(root->left!=NULL && root->right!=NULL)
        {
            int mini=minvalue(root->right)->data;
            root->data=mini;
            root->right=deletefromBST(root->right,mini);
            return root;
        }
        
    }
    else if(root->data>val)
    {
        root->left=deletefromBST(root->left,val);
        return root;
    }
    else{
        root->right=deletefromBST(root->right,val);
        return root;
    }
    return root;
}


int main()
{
    node* root=NULL;
    cout<<"enter data to create bst: "<<endl;
    takeinput(root);
    printlevelorder(root);
    

    return 0;
}

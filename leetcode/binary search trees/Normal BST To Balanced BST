/*************************************************************
    Following is the Binary Serach Tree node structure

    template <typename T>
    class TreeNode
    {
    public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/

    void inorder(TreeNode<int>* root,vector<TreeNode<int>*>&v)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,v);
        v.push_back(root);
        inorder(root->right,v);
    }
    TreeNode<int>* solve(int s,int e,vector<TreeNode<int>*>&v)
    {
        if(s>e)
        {
            return NULL;
        }
        int m=(s+e)/2;
        TreeNode<int>* node=new TreeNode<int>(v[m]->data);
        node->left=solve(s,m-1,v);
        node->right=solve(m+1,e,v);
        return node;


    }
TreeNode<int>* balancedBst(TreeNode<int>* root) {
    // Write your code here.
    vector<TreeNode<int>*>v;
    inorder(root,v);
    int start=0;
    int end=v.size()-1;
        
    
    return solve(start,end,v);
}

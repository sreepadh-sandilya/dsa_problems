/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count=0;
    // vector<int>v;
    int p;
    void traverse(TreeNode* root,int k){
        if(root==NULL)
        {
            return;
        }
        
        traverse(root->left,k);
        // v.push_back(root->val);
        count++;
        // cout<<count<<endl;
        if(count==k){
            p=root->val;
            return;
        }

        traverse(root->right,k);

    }
    int kthSmallest(TreeNode* root, int k) {
        
        traverse(root,k);
        // return v[k-1];
        return p;
        
    }
};

// morris traversal can be used to optimize it furhter more..

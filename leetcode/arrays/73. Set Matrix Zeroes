
// brute force solution
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        stack<pair<int,int>>st;
        int n=matrix.size(),m=matrix[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0){
                st.push(make_pair(i,j));
                }
            }
        }

        while(!st.empty())
        {
            pair<int,int>p=st.top();
            st.pop();
            int i=p.first;
            int j=p.second;
            for(int l=0;l<m;l++)
            {
                matrix[i][l]=0;
            }
            for(int l=0;l<n;l++)
            {
                matrix[l][j]=0;
            }
        }
        
        
    }
};


uses o(m+n) space complexity 

void setZeroes(vector<vector<int>>& matrix) {
        stack<pair<int,int>>st;

        int n=matrix.size(),m=matrix[0].size();
        unordered_set<int>r,c;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j]==0){
                // st.push(make_pair(i,j));
                r.insert(i);
                c.insert(j);
                }
            }

        }

        for(auto i:r)
        {
            for(int j=0;j<m;j++)
            {
                matrix[i][j]=0;
            }
        }
        for(auto i:c)
        {
            for(int j=0;j<n;j++)
            {
                matrix[j][i]=0;
            }
        }

}


// optimal solution which takes time complexity o(MN) and space complexity o(1)

class Solution {
public:
    void setZeroes(vector<vector<int>>& m) {
        // stack<pair<int,int>>st;

        int n=m.size(),k=m[0].size(),col;
        col=m[0][0];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<k;j++)
            {
                if(m[i][j]==0)
                {
                    if(i==0)
                    {
                        m[0][0]=0;
                    }
                    else if(j==0)
                    {
                        col=0;
                    }
                    else{
                    m[0][j]=0;
                    m[i][0]=0;
                    }
                }
            }
        }

        for(int i=1;i<n;i++)
        {
            if(m[i][0]==0)
            {
                for(int j=1;j<k;j++)
                {
                    m[i][j]=0;
                }
            }
        }

        for(int j=1;j<k;j++)
        {
            if(m[0][j]==0)
            {
                for(int i=1;i<n;i++)
                {
                    m[i][j]=0;
                }
            }
        }

        if(m[0][0]==0)
        {
            for(int j=0;j<k;j++)
            {
                m[0][j]=0;
            }
        }

        if(col==0)
        {
            for(int i=0;i<n;i++)
            {
                m[i][0]=0;
            }
        }




    }
};

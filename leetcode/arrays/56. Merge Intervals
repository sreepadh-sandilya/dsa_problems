class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& in) {
        sort(in.begin(),in.end());
        vector<vector<int>>ans;
        int n=in.size();
        int i=0,j=1;
        while(i<n && j<n)
        {
            int y=in[i][1];
            while(j<n && y>=in[j][0])
            {
                y=max(y,in[j][1]);
                   j++;
                   
               
            }
            j--;
            
            
            vector<int>v={in[i][0],y};
            ans.push_back(v);
            
            i=j+1;
            j=i+1;
            if(i==n-1)
            {
                ans.push_back(in[n-1]);
            }
        }

        if(i==0)
        {
            ans.push_back(in[0]);

        }

        return ans;

        
    }
};


// another method:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& in) {
        sort(in.begin(),in.end());
        vector<vector<int>>ans;
        int n=in.size();
        for(auto i:in)
        {
            if(ans.size()==0)
            {
                ans.push_back(i);
            }
            else
            {
                vector<int>v=ans.back();
                if(v[1]>=i[0])
                {
                    if(v[1]<i[1])
                    {
                        v[1]=i[1];
                        ans.pop_back();
                        ans.push_back(v);
                    }
                }
                else
                {
                    ans.push_back(i);
                }

            }
        }

        return ans;
        
    }
};


// another method:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& in) {
        sort(in.begin(),in.end());
        vector<vector<int>>ans;
        int n=in.size();
        for(auto i:in)
        {
            if(ans.empty() || ans.back()[1]<i[0])
            {
                ans.push_back(i);
            }
            else
            {
                ans.back()[1]=max(i[1],ans.back()[1]);
            }
        }
        return ans;
    }
};

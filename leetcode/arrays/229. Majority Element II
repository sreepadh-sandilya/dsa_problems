
//solved it in o(n) time complexity  and o(1) space complexity 

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int>ans;
        int a=INT_MAX,b=INT_MAX,x=0,y=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(x==0 && b!=nums[i]){
                a=nums[i];
                x=1;
            }
            else if(y==0 && a!=nums[i]){
                b=nums[i];
                y=1;
            }
            else if(a==nums[i]){
                x++;
            }
            else if(b==nums[i]){
                y++;
            }
            else{
                x--;
                y--;
            }

        }

        int sum1=0,sum2=0;
        for(auto i:nums)
        {
            if(i==a)
            {
                sum1++;
            }
            else if(i==b)
            {
                sum2++;
            }
        }

        int k=n/3;
        if(sum1>k)
        {
            ans.push_back(a);
        }
        if(sum2>k)
        {
            ans.push_back(b);
        }
        return ans;
    }
};

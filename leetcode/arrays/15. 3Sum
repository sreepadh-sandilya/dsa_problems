//o(n^2 * log(n))- time complexity
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>ans;
        unordered_set<vector<int>>p;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            unordered_set<int>st;

            for(int j=i+1;j<n;j++)
            {
                vector<int>v;
                int sum= -(nums[i]+nums[j]);
                if(st.find(sum)!=st.end())
                {
                     v.push_back(nums[i]);
                     v.push_back(nums[j]);
                     v.push_back(sum);
                     sort(v.begin(),v.end());
                    p.insert(v);
                }
                st.insert(nums[j]);

            }
        }

        for(auto i:p)
        {
            ans.push_back(i);
        }

        return ans;

        
    }
};


//o(n^2) - time complexity
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
          if(i>0 && nums[i]==nums[i-1])
          {
            continue;
          }

          int j=i+1,k=n-1;
          while(j<k){
          int sum=nums[i]+nums[j]+nums[k];
          if(sum<0)
          {
              j++;
          }
          else if(sum>0)
          {
              k--;
          }
          else
          {
              vector<int>v={nums[i],nums[j],nums[k]};
              ans.push_back(v);
              j++;
              k--;
              while(j<k && nums[j]==nums[j-1])
              {
                  j++;
              }
              while(j<k && nums[k]==nums[k+1])
              {
                  k--;
              }
          }
                
            
          }
        }

        return ans;
        
    }
};

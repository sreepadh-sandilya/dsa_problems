class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>>adj(n+1);
        for(auto i:times)
        {
            adj[i[0]].push_back({i[1],i[2]});

        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>dist(n+1,INT_MAX);
        dist[k]=0;
        pq.push({0,k});
        while(!pq.empty())
        {
            pair<int,int>temp=pq.top();
            pq.pop();
            int node=temp.second,w=temp.first;
            for(auto i:adj[node])
            {
                if(dist[i.first]>w+i.second)
                {
                    dist[i.first]=w+i.second;
                    pq.push({dist[i.first],i.first});
                }
            }
        }
        int p=-1;
        for(int i=1;i<=n;i++)
        {
            cout<<dist[i]<<endl;
            p=max(p,dist[i]);
        }
        if(p==INT_MAX)
        {
            return -1;
        }
        else
        {
            return p;
        }

        
    }
};

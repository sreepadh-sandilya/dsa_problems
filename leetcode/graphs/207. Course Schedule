class Solution {
public:
    bool dfs(int node,vector<bool>&vis,vector<bool>&path,vector<vector<int>>& p,stack<int>&st)
    {
        vis[node]=true;
        path[node]=true;
        // cout<<node<<endl;
        for(auto i:p[node])
        {
            if(!vis[i])
            {
                if(dfs(i,vis,path,p,st))
                {
                    // cout<<i<<endl;
                    return true;
                }
            }
            else if(path[i])
            {
                cout<<i<<endl;
                return true;
            }
        }
        st.push(node);
        // cout<<st.top()<<endl;
        path[node]=false;
        return false;
    }
    bool canFinish(int n, vector<vector<int>>& pre) {
     vector<bool>vis(n,false);
     vector<bool>path(n,false);
     vector<vector<int>>p(n);
     for(auto i:pre)
     {
         
         
            p[i[0]].push_back(i[1]);
         
     }
     stack<int>st;
     for(int i=0;i<n;i++)
     {
         if(!vis[i])
         {
            if(dfs(i,vis,path,p,st)){
                return false;
            }
         }

     }
    //  cout<<st.size()<<endl;
     if(st.size()==n)
     {
         return true;
     }
     else
     {
         return false;
     }

        

        
    }
};

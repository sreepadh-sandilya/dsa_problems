class Solution {
public:

    void dfs(vector<vector<int>>& c,int node,int n,map<int,vector<int>>&mp,vector<bool>&vis)
    {
        if(!vis[node])
        {
           vis[node]=true;
           for(auto i:mp[node])
           {
               if(!vis[i])
               {
                   dfs(c,i,n,mp,vis);
               }
           }
        }
    }
    int makeConnected(int n, vector<vector<int>>& c) {
        map<int,vector<int>>mp;
        for(auto i:c)
        {
            mp[i[0]].push_back(i[1]);
            mp[i[1]].push_back(i[0]);
        }

        int nc=0,ca=0;
        vector<bool>vis(n,false);
        for(int i=0;i<n;i++)
        {
          if(!vis[i])
          {
              
              dfs(c,i,n,mp,vis);
              nc++;
          }
        }

        for(int i=0;i<n;i++)
        {
            // if(mp.count(i)==0)
            // {
            //     nc++;
            // }
            ca+=mp[i].size();
        }
        // cout<<nc<<" "<<ca<<endl;

        if(ca/2<n-1)
        {
            return -1;
        }

        return nc-1;

        
    }
};

// below is using union find algo"
class disjointset{
    vector<int>rank,parent,size;
    public:
        disjointset(int n)
        {
            rank.resize(n+1,0);
            parent.resize(n+1);
            size.resize(n+1,1);
            for(int i=0;i<n;i++)
            {
                parent[i]=i;
            }
        }
        
        int findUpar(int node)
        {
            if(node==parent[node])
            {
                return node;
            }
            return parent[node]=findUpar(parent[node]);
        }
        
        void unionbyrank(int u,int v)
        {
            int ulp_u=findUpar(u);
            int ulp_v=findUpar(v);
            if(u==v)
            {
                return;
            }
            if(rank[ulp_v]>rank[ulp_u])
            {
                parent[ulp_u]=ulp_v;
            }
            else if(rank[ulp_v]<rank[ulp_u])
            {
                parent[ulp_v]=ulp_u;
            }
            else
            {
                parent[ulp_v]=ulp_u;
                rank[ulp_u]++;
            }
        }
        
        void unionBySize(int u,int v)
        {
            int ulp_u=findUpar(u);
            int ulp_v=findUpar(v);
            if(ulp_u==ulp_v)
            {
                return;
            }
            if(size[ulp_v]>size[ulp_u])
            {
                parent[ulp_u]=ulp_v;
                size[ulp_v]+=size[ulp_u];
            }
            else if(size[ulp_v]<size[ulp_u])
            {
                parent[ulp_v]=ulp_u;
                size[ulp_u]+=size[ulp_v];
            }
            else
            {
                parent[ulp_v]=ulp_u;
                rank[ulp_u]++;
            }
        }
        
    
};


class Solution {
public:
    

    int makeConnected(int n, vector<vector<int>>& c) {

        disjointset ds(n);
        int cab=0,nc=0;
        for(int i=0;i<c.size();i++)
        {
            if(ds.findUpar(c[i][0])==ds.findUpar(c[i][1]))
            {
               cab++;
            }
            else
            {
                ds.unionbyrank(c[i][0],c[i][1]);
            }
        }

        for(int i=0;i<n;i++)
        {
            if(ds.findUpar(i)==i)
            {
                nc++;
            }
        }

        if(cab<nc-1)
        {
            return -1;
        }
        else
        {
            return nc-1;
        }


        
    }
};

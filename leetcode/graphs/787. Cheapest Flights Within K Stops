
// this is using dfs whihc gives tle..
class Solution {
public:
    void dfs(int node,vector<vector<int>>& flights,int src,int dst,int k,int sum,vector<bool>&vis,int n,int &f,int &sum1)
    {
        // cout<<node<<endl;
         if(node==n)
         {
             return;

         }
         if(sum>k)
         {
            return;
         }
         if(node==dst)
         {
            f=min(f,sum1);
            return;
         }
         
            // int i=flights[node][1];
            // sum1=sum1+flights[node][2];
            // cout<<sum1<<" "<<flights[node][1]<<endl;
            for(int j=0;j<flights.size();j++)
            {
                // cout<<j<<endl;
                if(flights[j][0]==node){
                
                if(!vis[flights[j][1]]){
                sum1+=flights[j][2];
                // cout<<sum1<<" "<<flights[j][1]<<endl;
                vis[flights[j][1]]=true;
                
                // cout<<sum1<<" "<<flights[j][1]<<endl;
                dfs(flights[j][1],flights,src,dst,k,sum+1,vis,n,f,sum1);
                vis[flights[j][1]]=false;
                sum1-=flights[j][2];
                }
                
            // sum1=sum1-flights[node][2];

                }
            }
            
        


    }
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        int sum=0,f=INT_MAX;
        vector<bool>vis(n,false);
        for(int i=0;i<flights.size();i++)
        {
            // cout<<i<<endl;

            if(flights[i][0]==src)
            {
                
            if(vis[flights[i][1]]!=true){
                
            vis[flights[i][1]]=true;
            dfs(flights[i][1],flights,src,dst,k,sum,vis,n,f,flights[i][2]);

            
            }
            }
        }

        if(f==INT_MAX)
        {
            return -1;
        }
        return f;

        
    }
};


// optimized code uisng Dijkstra's Algorithm:


class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int>dist(n,INT_MAX);
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,            greater<pair<int,pair<int,int>>>>pq;
        vector<pair<int,int>>adj[n];
        for(int i=0;i<flights.size();i++)
        {
            adj[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        dist[src]=0;
        pq.push({0,{src,0}});
        while(!pq.empty())
        {
            pair<int,pair<int,int>>temp=pq.top();
            pq.pop();
            int d=temp.first,node=temp.second.first,w=temp.second.second;
            if(d>k)
            {
                continue;
            }
            
            for(auto i : adj[node]) {
           if(dist[i.first] > w + i.second) {
           dist[i.first] = w + i.second;
           pq.push({d+1, {i.first, dist[i.first]}});
           }
    }
}

            
       
        

        if(dist[dst]==INT_MAX)
        {
            return -1;
        }
        else
        {
            return dist[dst];
        }
        
        
    }
};


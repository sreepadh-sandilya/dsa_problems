class Solution {
public:
    void mat(int n,vector<vector<int>>& edges,unordered_map<int,vector<int>>&mp)
    {
        int k=edges.size();
        for(int i=0;i<k;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            mp[u].push_back(v);
            mp[v].push_back(u);
        }
    }
   
    void dfs(unordered_map<int,vector<int>>&mp,int node,vector<bool>&vis,int &sum,int &k)
    {
       vis[node]=1;
       for(auto i:mp[node])
       {
          if(!vis[i])
          {
              sum++;
              k+=mp[i].size();
              dfs(mp,i,vis,sum,k);

          }
       }

    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        
        unordered_map<int,vector<int>>mp;
        mat(n,edges,mp);
        vector<bool>vis(n);
        int sum=0;
        int l=0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                sum=1;
                int k=mp[i].size();
                dfs(mp,i,vis,sum,k);
                if(k/2==(sum*(sum-1))/2)
                {
                    l++;
                }
                
            }
        }

        return l;

    }
};

// we can use topological sort to optimize the problem..but this code is genenral algorithm using bfs

class Solution {
  public:
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges){
        // code here
        vector<vector<pair<int,int>>>adj(n);
        for(auto i:edges)
        {
            adj[i[0]].push_back(make_pair(i[1],i[2]));
            // adj[i[1]].push_back(i[0]);
        }
        vector<int>dist(n,INT_MAX);
        dist[0]=0;
        queue<int>q;
        q.push(0);
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto i:adj[node])
            {
                if(dist[node]+i.second<dist[i.first])
                {
                    dist[i.first]=dist[node]+i.second;
                    q.push(i.first);
                }
            }
        }
        
        for(int i=0;i<n;i++)
        {
            if(dist[i]==INT_MAX)
            {
                dist[i]=-1;
            }
        }
        return dist;
    }
    
};

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>ans;  
        vector<vector<int>>g(n);
        for(int i=0;i<n;i++)
        {
            for(auto j:graph[i])
            {
                g[j].push_back(i);
            }
        }
        
        vector<int>indegree(n);
        for(int i=0;i<n;i++)
        {
            for(auto j:g[i])
            {
                indegree[j]++;
            }
        }
        queue<int>q;
        unordered_map<int,int>vis(n);
        for(int i=0;i<n;i++)
        {
           if(indegree[i]==0)
           {
               q.push(i);
               
           }
        }

        while(!q.empty())
        {
            int node=q.front();
            ans.push_back(node);
            q.pop();
            vis[node]++;
            for(auto i:g[node])
            {
                indegree[i]--;
                if(indegree[i]==0)
                {
                    q.push(i);
                    
                }
            }

        }

        sort(ans.begin(),ans.end());
        return ans;
        
        
        
    }
};
